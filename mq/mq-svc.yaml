apiVersion: v1
kind: Namespace
metadata:
  name: chat
spec: {}
status: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: ali-secret
  namespace: chat
data:
  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSJyZWdpc3RyeS5jbi1oYW5nemhvdS5hbGl5dW5jcy5jb20iOiB7CgkJCSJhdXRoIjogIk1UZzRPRGczT0RBd09EQTZaSFZqTVRJek1qUXoiCgkJfQoJfQp9Cg==
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mq-config
  namespace: chat
data:
  MQ_HOST: rabbitmq-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: chat
  labels:
    app: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: mqmanagement
        image: rabbitmq:3-management
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: chat
spec:
  selector:
    app: rabbitmq
  ports:
    - protocol: TCP
      port: 5672
      targetPort: 5672
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service-node-port
  namespace: chat
spec:
  selector:
    app: rabbitmq
  ports:
    - protocol: TCP
      port: 80
      targetPort: 15672
      nodePort: 30017
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqtest
  namespace: chat
  labels:
    app: app-mq
spec:
  replicas: 4
  selector:
    matchLabels:
      app: mq
  template:
    metadata:
      labels:
        app: mq
    spec:
      imagePullSecrets:
        - name: ali-secret
      containers:
      - name: app
        image: registry.cn-hangzhou.aliyuncs.com/duc-cnzj/mqtest:1.0.20
        #image: registry.cn-hangzhou.aliyuncs.com/duc-cnzj/mqtest:1.0.19
        ports:
        - containerPort: 9999
        env:
        - name: MQ_HOST
          value: rabbitmq-service
        readinessProbe:
          httpGet:
            path: /ping
            port: 9999
          initialDelaySeconds: 3
          periodSeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /ping
            port: 9999
          initialDelaySeconds: 3
          periodSeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "1Mi"
          limits:
            memory: "20Mi"
        envFrom:
        - configMapRef:
            name: mq-config
---
apiVersion: v1
kind: Service
metadata:
  name: chat-service
  namespace: chat
spec:
  selector:
    app: mq
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9999
      name: http
      # nodePort: 32222
  # type: NodePort
  type: ClusterIP
            #apiVersion: v1
            #kind: Service
            #metadata:
            #  name: mq-service
            #spec:
            #  selector:
            #    app: mq
            #  ports:
            #    - protocol: TCP
            #      port: 80
            #      targetPort: 9999
            #  type: ClusterIP
---
# apiVersion: networking.k8s.io/v1beta1
# kind: Ingress
# metadata:
#   name: ingress-mq
#   namespace: chat
#   annotations:
#     kubernetes.io/ingress.class: "nginx"
#      # cert-manager.io/cluster-issuer: "letsencrypt-prod"
# spec:
#  # tls:
#  # - hosts:
#  #   - chat.k8s.work
#  #   secretName: chat-tls
#  rules:
#    - host: chat.k8s.work
#      http:
#       paths:
#         - path: /
#           backend:
#             serviceName: chat-service
#             servicePort: http
# ---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-mq
  namespace: chat
  annotations:
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: chat.k8s.work
    http:
      paths:
      - path: /
        backend:
          serviceName: chat-service
          servicePort: 80

